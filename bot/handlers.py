import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from db.models import Task
from services.opus_api import opus_api
from utils.logger import log_user_request

router = Router()

def is_youtube_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube"""
    youtube_patterns = [
        r'(?:https?://)?(?:www\.)?youtube\.com/watch\?v=[\w-]+',
        r'(?:https?://)?(?:www\.)?youtu\.be/[\w-]+',
        r'(?:https?://)?(?:www\.)?youtube\.com/shorts/[\w-]+'
    ]
    return any(re.match(pattern, url) for pattern in youtube_patterns)

@router.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ YouTube –≤–∏–¥–µ–æ –Ω–∞ Shorts.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–ª–∏–ø—ã!\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ youtube.com/watch?v=...\n"
        "‚Ä¢ youtu.be/...\n"
        "‚Ä¢ youtube.com/shorts/..."
    )
    await message.answer(welcome_text)

@router.message(F.text)
async def url_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = message.text.strip()
    user_id = message.from_user.id
    
    if not is_youtube_url(url):
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube.\n"
            "–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ."
        )
        return
    
    log_user_request(user_id, url)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
        task_id = await Task.create(user_id, url, "")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Opus API
        opus_job_id = await opus_api.create_job(url, user_id, task_id)
        
        if not opus_job_id:
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å opus_job_id
        await Task.update_status(task_id, "processing")
        
        await processing_msg.edit_text(
            "‚úÖ –í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n"
            "–Ø —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è, –∫–æ–≥–¥–∞ –Ω–∞—Ä–µ–∑–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞."
        )
        
    except Exception as e:
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É."
        )