# Общая структура проектов

[← Главная](https://www.notion.so/Python-TechWizards-1a0375708339806bb1f0c7e17441bac7?pvs=21)

[Git с кодом →](https://git.wizardstech.ru/TechWizards/template)

```
my-project-123
├── README.md
├── api.dockerfile
├── api.py
├── bot.dockerfile
├── bot.py
├── compose.yml
├── config.py
├── manager.dockerfile
├── manager.py
├── requirements.txt
│
├──api
│   ├──router
│   │   └── user.py
│   └──schemas
│       └── user.py
│
├──bot
│   ├──filters
│   │   ├── admin.py
│   │   ├── middleware.py
│   │   └── user.py
│   ├──handlers
│   │   ├──admin
│   │   │   ├── commands.py
│   │   │   ├── mailing.py
│   │   │   └── menu.py
│   │   └──user
│   │       ├── commands.py
│   │       ├── menu.py
│   │       └── reg.py
│   └──templates
│       ├──admin
│       │   ├── mailing.py
│       │   └── menu.py
│       ├── helpers.py
│       └──user
│           ├── bots.py
│           ├── menu.py
│           └── reg.py
│
├──core
│   ├── api.py
│   ├── bot.py
│   ├── logger.py
│   ├── psql.py
│   └── redis.py
│
├──data
│   ├──api
│   └──bot
│
├──db
│   ├──psql
│   │   ├──crud
│   │   │   └── crud.py
│   │   └──models
│   │       ├── columns.py
│   │       ├── enum.py
│   │       └── models.py
│   └──redis
│       └──models
│           ├── models.py
│           ├── enum.py
│           └── user.py
│
├──integrations
│   ├── base.py
│   └── yookassa.py
│
├──logs
│   ├── api.log
│   ├── bot.log
│   ├── postgre.log
│   ├── redis.log
│   └── storage.log
│
├──services
│   ├── base.py
│   ├── models.py
│   └── payment_manager.py
│
└──utils
    ├── api.py
    ├── encryption.py
    └── mailing.py

```

# Подробнее о каждом сервисе.

[О каждом сервисе →](https://www.notion.so/1a137570833980b1a9efc957229b03ac?pvs=21)

# Объяснение структура.

- `api/` - FastApi

- `bot/` - Телеграм бота

- `db/` - Базы данных проекта

- `core/`  - Важные переменные и настройки каждого глобального сервиса.
    
     В случае глобального сервиса psql внутри `/core/psql.py` лежит переменная ядра, подключения, класс `DeclarativeBase` .
    
    В `/core/bot.py` лежит переменная `bot` равная классу `aiogram.Bot` . Так для каждого глобального сервиса.
    
- `data/` - Хранилище любых файлов.
    
    Все временные и постоянные файлы здесь. Глобальный сервис Bot сохраняет / хранит все нужные ему файлы в `/data/bot` , а  глобальный сервис API сохраняет / хранит все нужные ему файлы в `/data/api` .
    

- `integrations/`  - Классы сервисов всех внешних интеграций. Платежки, ИИ, Облака и т.д.
    
    В `/integrations/base.py` описан абстрактный класс интеграций, который наследуются классами интеграций .
    
    В `/integrations/models.py` описаны кастомные `@dataclass` / `pydantic` классы, которые может возвращать или принимать интеграция.
    
- `services/` - Все внутренние сервисы проекта.
    
     В примере это Менеджер оплат - *Бесконечный цикл в отдельном контейнере, который раз в N сек берет все не оплаченные счета из бд, делает запрос в платежку и обновляет их статус. В случае, если оплата прошла, то отправляет сообщение пользователю.*
    
    В `/services/models.py` описаны кастомные `@dataclass`  / `pydantic` классы, которые может возвращать или принимать внутренний сервис.
    
    В `/services/base.py` описан абстрактный класс менеджера, который наследуется классом менеджера из `/services/payment_manager.py` .
    
- `utils/` - Папка с функциями сервисов.
    
    Например, в `/utils/api.py` лежит функция `auth_by_token` для аутентификации пользователя по токену, а в `/utils/mailing.py` функция `start_mailing` для отправления сообщения рассылки всем пользователям.
    

# По каким принципам построена структура.

### 1. Верное имя проекта.

В имени проекта обязательно нужно указывать его ID, который указан в Otask.

Этот же ID обязательно нужно указывать при загрузке в Git.

### 2. Все имена файлов из разных папок перекликаются друг с другом.

Все файлы одного сервиса почти всегда имеют одинаковые имена, но в разных папках.

Роутер `user` сервиса API будет использовать функции из `utils/api.py` , его логи сохраняются в `logs/api.log`, запускается он из под файла `api.py` в контейнере с именем `api` , который создается на основе файла `api.dockerfile` , а все переменные в `.env` для этого сервиса начинаются с `API_` . Так должно быть с каждым сервисом.

### 3. Лучше много файлов в одной папке, чем много разного в одном файле.

Намного более читаемо создать файл `utils/encryption.py` и хранить там функции `generate_key`, `encrypt`, `decrypt` , чем засовывать их в `utils/api.py` , где они будут использоваться функцией `auth_by_token` для аутентификации пользователя.

### 4. Сохранение разделения сервисов.

Помним, что, например, бот и API - разные сервисы. Если нам нужно в бота импортировать что то из API, то стоит задуматься: “Может перенести это “что то” в папку `utils/`  или `core/`?”.